<?php
error_reporting(E_ALL);
set_time_limit(0);
header("Content-Type: text/html; charset=utf-8");

class Crawler extends CI_Controller
{
	function __construct()
	{
		parent::__construct();
		$this->load->library('iauc_crawler');
	}
	
	function index()
	{
		$html = file_get_contents(FCPATH."/data/detail_20300.html");
		$code_name = "RZH112V";
		$mk_matched = preg_match("@{$code_name}.*([\d]{6,10})@", $html, $mk_matches);
			if($mk_matched){
			echo $mk_matches[1];
		}		
	}
	
	function run()
	{
		//$this->iauc_crawler->get_code_grade_only = TRUE;
		//$this->iauc_crawler->test();
		$this->iauc_crawler->do_login = TRUE;
		
		$today = date("l");
		
		$crawl_type_cfg = $this->config->item("crawl_type_list");
		$type_id_list = $crawl_type_cfg[$today];
		
		foreach($type_id_list as $type_id)
		{
			$type = $this->auction->get_type_by_id($type_id);
			$maker = $this->auction->get_maker_by_id($type->maker_id);

			//echo $type->id.":".$type->name_jp."<br />";
			$this->iauc_crawler->run($maker, $type);
			echo "<hr />";	
			flush();
			sleep(5);
		}		
		
	}
	function test()
	{
		header("Content-Type: text/plain; ");
		$html = file_get_contents(FCPATH."html_check/40080.html");
		//$html = mb_convert_encoding($html, "UTF-8", "SHIFT-JIS");
		
		if(!preg_match("@<td.*>(.*)å¹´å¼.*</td>@", $html, $matches) && !preg_match("@<td.*>(.*)年式.*</td>@", $html, $matches))
		{
			//$html = mb_convert_encoding($html, "SHIFT-JIS", "UTF-8");
		}
		
	
		$dom = new DOMDocument();
		@$dom->loadHTML($html);
		$xpath = new DOMXPath($dom);
		
		$p = preg_match_all("@<td.*>(.*)</td>@", $html, $matches);
		foreach($matches as $td){
			//foreach($td as $t) echo $t."<br />";
		}
		//return;
		
		$label_list = array(
			"year" 		=> "å¹´å¼", //"年式"
			"cc" 		=> "ææ°é", //"排気量",
			//"grade"		=> "グレード", "ã°ã¬ã¼ã",
			"distance" 	=> "èµ°è¡", //"走行",// 
			"shift" 	=> "ã·ãã", //"シフト", //  
			"point"		=> "è©ä¾¡ç¹",
		);
		
		$label_list2 = array(
			"year" 		=> "年式", //"年式"
			"cc" 		=> "排気量", //"排気量",
			"distance" 	=> "走行", //"走行",// 
			"shift" 	=> "シフト", //"シフト", //  
			"point"		=> "評価点",
		);		
		
		if(preg_match_all("@04(.*)</td>@", $html, $matches)){
			foreach($matches as $m){
				//foreach($m as $t) echo $t."\n";
			}
		}
		
		// looping label list to get value
		// from label, move to next tr to get value
		foreach($label_list as $field => $label)
		{	
			$q = $xpath->query("/html/body/form[3]/div[2]/table//*[text()[contains(.,'{$label}')]]");		

			if($q->length == 0){
				$label = $label_list2[$field];
				$q = $xpath->query("/html/body/form[3]/div[2]/table//*[text()[contains(.,'{$label}')]]");
			}
						echo $label."|".$q->length."\n";
			if($q->length > 0){
				$label_path = $q->item(0)->getNodePath(); echo $label_path;
				$last_tr_td_m = preg_match("@tr\[([0-9]+)\]/td\[([0-9]+)\]$@", $label_path, $matches);
								if($last_tr_td_m){
						$label_tr_index = $matches[1];
						$val_tr_index = $matches[1] + 1;
						
						$label_td_index = $matches[2];
						$val_td_index = $matches[2] + 1;
						$val_path = preg_replace("@tr\[([0-9]+)\]/td\[([0-9]+)\]$@", "tr[{$val_tr_index}]/td[{$label_td_index}]", $label_path);
						//echo $val_path."<br />";
						
						$val = $xpath->query($val_path);
						if($val->length > 0){
							$field_val = $val->item(0)->nodeValue;
							//echo $field_val;
							switch($field){
								case 'year':									
									if(preg_match("@([0-9]+)å¹´@", $field_val, $matches) || preg_match("@([0-9]+)年@", $field_val, $matches) || preg_match("@H([0-9]+)@", $field_val, $matches)){
										$year = $matches[1];
										$db_fields['year'] = $year;
									}
									echo "year: $year;";
									break;
									
								case 'cc':
									$cc_m = preg_match("@([0-9]+)cc@", $field_val, $matches);
									if($cc_m) $db_fields['cubic_capacity'] = $matches[1];	
									echo "cc:".$field_val;
									break;	
									
								case 'grade':
									$db_fields['grade'] = $field_val;
									break;
									
								case 'distance':
									$distance_m = preg_match("@([0-9]+)åkm@", $field_val, $matches);
									if($distance_m) $db_fields['distance'] = $matches[1];
									echo "distance:$field_val";									
									break;
									
								case 'shift':
									$shift_m = preg_match("@([A-Z]+)@", $field_val, $matches);
									if($shift_m) $db_fields['shift'] = $matches[1];
									echo "shift: $field_val";										
									break;			
								case 'point':
									$db_fields['point'] = $field_val;
									echo "point: $field_val";
									break;											
								default: break;			
							}
						}
					}				
			}	
			else{ // xpath doesn't work
				$year_m = preg_match("@(.*)”N@", $html, $matches);
				if($year_m) echo "YEAR:".$matches[1];			 
			}
		}	
	}
	function is_year_value($string)
	{
		if(preg_match("@([0-9]+)å¹´@", $string) || preg_match("@H([0-9]+)@", $string)){
			return TRUE;
		}
		return FALSE;
	}
	
	function gen_code_grade($type_name_jp)
	{
		$type_name_jp = rawurldecode($type_name_jp);
		$type = $this->auction->get_type_by_name_jp($type_name_jp);
		if($type == NULL) die("Type not found!");
		
		$file = FCPATH."data/prertinf03.html";
		$html = mb_convert_encoding(file_get_contents($file), "UTF-8", "SHIFT-JIS");
		$code_matched = preg_match("/arrKata = (.*);/", $html, $matches);
		if($code_matched){
			$code_list = json_decode($matches[1]); // CODE LIST
			foreach($code_list as $name => $id){
				$this->db->query("INSERT INTO codes(type_id, name, iauc_id) VALUES('{$type->id}', '{$name}', '{$id}')");
				$code_id = $this->db->insert_id();
				$grade_matched = preg_match("/arrType{$id} = (.*);/", $html, $matches);
				if($grade_matched){
					$grade_list = json_decode($matches[1]);
					foreach($grade_list as $name => $encoded){
						$this->db->query("INSERT INTO grades(code_id, name, encoded) VALUES('{$code_id}', '{$name}', '{$encoded}')");		
					}
				}
			}
		}
		
	}
	// generate type list for each maker. RUN ONCE
	function gen_type_list()
	{
		$file = FCPATH."data/prertinf02.html";
		$html = mb_convert_encoding(file_get_contents($file), "UTF-8", "SHIFT-JIS");
		
		$maker_list = $this->db->get("makers")->result();
		foreach($maker_list as $maker){
			$matched = preg_match("/arrType{$maker->iauc_id} = (.*);/", $html, $matches);
			if($matched){
				$type_list = json_decode($matches[1]);
				foreach($type_list as $name => $encoded){
					$this->db->query("insert into car_types(maker_iauc_id, name_jp, encoded) values('{$maker->iauc_id}', '$name', '$encoded');");
				}
			}
		}
	}
	function update_type()
	{
		$maker_list = $this->auction->get_maker_list();
		foreach($maker_list as $m)
		{
			$this->db->query("UPDATE types SET maker_id = '{$m->id}' WHERE maker_iauc_id = '{$m->iauc_id}'");			
		}
	}
	
	function update_code_grade()
	{
		$auction_list = $this->db->get("auction")->result();
		foreach($auction_list as $auc){
			if(!$this->auction->code_grade_exists($auc->code_id, $auc->grade_id)){
				$this->auction->add_code_grade($auc->code_id, $auc->grade_id);
			}
		}
	}
	
	// check once
	function type_count()
	{
		$this->iauc_crawler->get_total_result_only = TRUE;
		$type_id_list = $this->config->item("crawl_type_list");
		
//		for($i = 0; $i < 31; $i++) array_shift($type_id_list);
//
		$type_list = array();
		foreach($type_id_list as $t){
			if($t != 425) continue;
			$type = $this->auction->get_type_by_id($t);
			$maker = $this->auction->get_maker_by_id($type->maker_id);
			$type->maker_iauc_id = $maker->iauc_id;
			array_push($type_list, $type);	
		}

//		
//		$first = array_shift($type_list);
//		$this->iauc_crawler->do_login = TRUE;
//		echo $first->id.":".$first->name_jp."<br />";
//		$this->iauc_crawler->run($first->maker_id, $first->maker_iauc_id, $first->id, $first->encoded);
//		echo "<hr />";	

		$this->iauc_crawler->do_login = TRUE;
		foreach($type_list as $type){
			echo $type->id.":".$type->name_jp."<br />";
			$this->iauc_crawler->run($type->maker_id, $type->maker_iauc_id, $type->id, $type->encoded);
			echo "<hr />";	
			flush();
			sleep(3);
		}
	}
}
